<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AppStore账号申请]]></title>
    <url>%2F2017%2F05%2F20%2FAppStore%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7%2F</url>
    <content type="text"><![CDATA[1.申请Apple ID1.1 请点击进入苹果开发者网站1.2 进入网页后点击右上角的Account标签进入新页面，点击创建App ID1.3 填写信息创建Apple ID2.申请邓白氏码2.1 请点击进入苹果开发者网站2.2 点击网页上方的Support标签，进入新页面点击Membership 2.3 选择邓白氏编码 D-U-N-S Number点击 2.4 点击D-U-N-S Number look up tool 连接在收到邓白氏码后请求公司账号的时候请注意时间问题 Receiving and Managing Your D-U-N-S NumberAfter requesting a D-U-N-S Number, please allow up to 5 business days to receive your number from D&amp;B. Expediting your D-U-N-S Number creation process will not shorten this waiting period. If your application has taken longer than two weeks to process, please email D&amp;B.Once you receive your D-U-N-S Number, please allow up to 2 business days for Apple to receive your information from D&amp;B. After this period, you may enroll as a company/organization in the Apple Developer Program.To update your D&amp;B profile, please email D&amp;B. It takes up to 14 business days for D&amp;B to provide updated information to Apple. 在点击后如果你没有登录苹果开发者网站系统会让你登陆，请用第一步申请到的Apple ID和密码进行登陆。 2.5 填写公司信息公司信息填写完成后点击右下角的Continue,进入下一页面。如果你的公司没有邓白氏编码你可以请求一个邓白氏编码。 2.6 请求公司的邓白氏编码提交申请后请注册查看来自邓白氏公司的邮件。在请求邓白氏编码的时候会接受到来自邓白氏的邮件和回访电话，在此期间按照要求提供材料就可以了,在此期间你需要的是耐心等待 3.注册成为苹果公司开发者3.1 点击进入苹果官网 点击右上角蓝色的Enroll按钮进入下一页。后继续点击页面下方蓝色的按钮:Start Your Enrollment 3.2 选择成为公司开发者 3.3 填写申请信息 3.4 校验信息提交申请]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS自动化发布工具fastlane]]></title>
    <url>%2F2017%2F05%2F19%2FiOS%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83%E5%B7%A5%E5%85%B7fastlane%2F</url>
    <content type="text"><![CDATA[fastlane初识 fastlane 是一个很棒的iOS和Andriod的一个自动化版本发布工具，它提供了一系列的插件用来解决打包发布上传应用市场这个过程一系列的问题。本教程将介绍如何通过fastlane来自动化上传一个应用到AppStore fastlane环境搭建 在一切开始之前你需要确定你的电脑上有最新的Xcode命令行工具在终端输入：xcode-select --install 安装fastlane:你有三种方式在你的电脑上安装fastlane 使用命令行brew cask install fastlane 通过homewbrew软件包管理器安装 使用命令行sudo gem install fastlane -NV 通过gem安装 如果你使用上面的命令行安装出错了，那么你可以直接点击连接下载安装包来安装fastlane 初始化:进入你app的根目录下执行命令行 fastlane init 至此你将可以通过fastlane来管理你项目的发布过程。 fastlane的常用插件produce Creates the given application on iTC and the Dev Portal if necessaryproduce插件是用来在iTunes Connect里面创建你自己的应用的（如果有则不创建） procuce有很多可选参数，下面简单介绍几个: username 用户名，这个就是你的appid账号 team_id 团队id，这个是你所在团队的id app_identifier 你应用的唯一标识符,可以填bundle Id app_name 你应用的名称 language 应用支持的语言，简体中文：Simplified Chinese app_version app的版本号 1.0 sku 套装id，简单点直接写bundle Id 1234567891011lane :createApp do |options| produce( username: options[:username], team_id: options[:teamid], app_identifier: options[:appidentifier], app_name: options[:appname], language: &quot;Simplified Chinese&quot;, app_version: &quot;1.0&quot;, sku: options[:appidentifier] )end 我们可以使用lane 定义一个代码块用来封装我们需要的功能，同时可以使用options来配置参数 更多可用参数请点击这里More cert Fetch or generate the latest available code signing identity cret插件可以用来获取最新的代码签名证书,官方推荐配合match插件使用（如果你需要进行团队合作） 介绍几个cert的可选参数: username 用户名，你的苹果开发者账号 team_id 团队的Id 1234cert( username: options[:username], team_id: options[:teamid] ) 更多可用的参数请点击这里More pem Makes sure a valid push profile is active and creates a new one if neededpem 插件是用来创建iOS推送证书的，它会先确定是否有一个可用的推送证书如果有需要会创建一个新的推送证书 可选参数: username 用户名，就是你的开发者账号 team_id 团队的Id p12_password 用于p12文件的密码 generate_p12 创建一个p12文件 output_path 导出的证书钥匙串等的存放目录 12345678pem( username: options[:username], team_id: options[:teamid], p12_password: &quot;12345678&quot;, app_identifier: options[:appidentifier], generate_p12: true, output_path: &quot;../#&#123;options[:appname]&#125;/&quot; ) 更多可用的参数请点击这里More sigh Generates a provisioning profile. Stores the profile in the current folder .sigh 是用来创建配置文件provisioning的如果需要进行团队合作建议配合match插件使用sigh 可选参数: force 是否更新配置文件 app_identifier app的唯一标识符 bundleId id username 用户名，你的苹果开发者账号 team_id 团队的Id 123456sigh( force: true, username: options[:username], team_id: options[:teamid], app_identifier: options[:appidentifier] ) 更多可用的参数请点击这里More gym Easily build and sign your app using gymgym插件可以对你的项目进行编译打包并且进行签名 可用的参数: scheme 待编译工程的schem，可以使用命令行xcodebuild -list来获取可用的schem值 clean 是否在编译之前清理工程 silent 是否隐藏不必要信息 output_directory 编译好的ipa包的存放目录 1234gym( silent: true, clean: true ) 更多可用的参数请点击这里More snapshot Generate new localised screenshots on multiple devices自动截图工具，可以对应用截图自动生成iTunes Connect需要的预览图片 可用参数: devices 截图时使用的机器 languages 使用的语言 output_directory 生成图片的导出目录 当然了，你可以使用命令fastlane snapshot init 来自动生成截图需要的配置，在自动生成的Snapfile文件里面会有一些提供好的参数可供选择 1234desc &quot;snapshot&quot; lane :shot do snapshot end 截图插件的详细使用方式请点击这里 更多可用的参数请点击这里More deliver Uses deliver to upload new app metadata and builds to iTunes Connect上传ipa包到iTunes Connect 可用的参数: app_identifier 应用的bundle id username 开发者账号 12345deliver( app_identifier: options[:appidentifier], username: options[:username] ) 更多可用的参数请点击这里More fastlane buildupload这里提供一个可用的demo来对工程进行自动化打包上传 12345678910111213141516171819202122232425262728293031323334353637383940desc &quot;build your application to an ipa and upload the ipa&quot;desc &quot;if you want upload an ipa to itunes Connect ,please use command line : fastlane buildupload&quot; lane :buildupload do |options| produce( username: options[:username], team_id: options[:teamid], app_identifier: options[:appidentifier], app_name: options[:appname], language: &quot;Simplified Chinese&quot;, app_version: &quot;1.0&quot;, sku: options[:appidentifier], ) cert( username: options[:username], team_id: options[:teamid] ) pem( username: options[:username], team_id: options[:teamid], p12_password: &quot;12345678&quot;, app_identifier: options[:appidentifier], generate_p12: true, output_path: &quot;../#&#123;options[:appname]&#125;/&quot; ) sigh( force: true, username: options[:username], # team_id: options[:teamid], app_identifier: options[:appidentifier] ) clear_derived_data gym( silent: true, clean: true) deliver( app_identifier: options[:appidentifier], username: options[:username] ) end 调用命令：fastlane buildupload 参数1 参数2 参数3 ... 使用shell修改工程配置 在很多情况下我们使用自动化打包工具都是需要批量处理很多工程编译出不同的IPA包的，这就需要我们在使用fastlane之前先修改一些工程的配置 从svn或者git等仓库里面checkout 代码 12rm -rf deploysvn co svn://xxx/xxx/xxx/xxx deploy 从文件里面读取配置信息到数组如: 123456i=0for s in `cat params/appname.txt`do appnames[$&#123;i&#125;]=$&#123;s&#125; i=$&#123;i&#125;+1 done appname.txt文件里面一行写一个app的名字，有几个app就写几行其他的诸如bundle id ，username 等信息类似 修改应用的bundle Id sed -i &#39;&#39; &quot;s/com.xxx.xxx/$1/g&quot; xxx.xcodeproj/project.pbxproj $1，参数一是新的bundle id 修改应用名称 /usr/libexec/PlistBuddy -c &quot;Set :CFBundleDisplayName $2&quot; Jubaodai/Info.plist $2是新的应用名称 修改应用的icons图片 cp -r ../pictures/$2/AppIcon.appiconset/. xxx/Assets.xcassets/AppIcon.appiconset 修改fastlane 元数据里面的应用名称 echo newAppName &gt; fastlane/metadata/zh-Hans/name.txt 修改fastlane 里面上传iTunes Connect 的icon图片 cp ../pictures/$1/app_icon.jpg fastlane/metadata/app_icon.jpg 调用fastlane 进行自动打包 fastlane buildupload username:${usernames[${i}]} teamid:${teamids[${i}]} appidentifier:${appidentifiers[${i}]} appname:${appnames[${i}]}]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
</search>